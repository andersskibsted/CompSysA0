{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Assigment 2 notebook\n",
    "\n",
    "#### In this notebook you will need to program a Newton-Raphson solver and apply it to the derivatives of the following two functions:\n",
    "#### - $f_1(x)= -\\frac{x}{\\sigma^2} e^{-\\frac{x^2}{2\\sigma^2}}$ with $\\sigma = 1.0$, (but you could change $\\sigma$ to another positive value),\n",
    "#### - $f_2(x) =  1.45469 - 3.46032x - 0.272173x^2 + 0.186534x^3  -0.0022172 x^4 - 0.00156431x^5.$\n",
    "\n",
    "#### They have been coded for you, but you need to compute and code derivatives yourselves."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load the packages used for calculation and plotting\n",
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from typing import Callable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f1(x, sigma=1.0):\n",
    "    return (-x/sigma**2) * np.exp(-x**2 / (2*sigma**2))\n",
    "\n",
    "def df1(x, sigma=1.0):\n",
    "    \"\"\"derivative of f1.\"\"\"\n",
    "    # put your code here!\n",
    "    \n",
    "def f2(x):\n",
    "    return 1.45469 - 3.46032 * x - 0.272173 * x**2 + 0.186534 * x**3  -0.0022172 * x**4- 0.00156431 * x**5\n",
    "\n",
    "def df1(x, sigma=1.0):\n",
    "    \"\"\"derivative of f1.\"\"\"\n",
    "    # put your code here!\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def NewtonRaphson(f: Callable, df: Callable, x0: float, epsilon:float, max_iters:int)->tuple:\n",
    "    \"\"\"\n",
    "    Newton Raphson solver for f(x) = 0, with f:R to R.\n",
    "    \n",
    "    :param f: the function we want to find a zero of.\n",
    "    :param df: the derivative of the function.\n",
    "    :param x0: float, initiali value in root search.\n",
    "    :param epsilon: positive real, tolerance for convergence or nullity of derivative.\n",
    "    :param max_iters: int, maximum number of iterations\n",
    "    \n",
    "    :return:\n",
    "        a tuple (xn, fxn, iteration, converged)\n",
    "        xn should be the solution\n",
    "        fxn should be the function value and is expected to have |fnx| < epsilon\n",
    "        iteration: the iteration where it converged.\n",
    "        converegd: boolean, indicating whether it did actually converged or if \n",
    "        some numerical problem with derivatives was encountered, or if all iterations \n",
    "        where run and the tolerance threshold not reached.\n",
    "    \"\"\"\n",
    "    # Put your code here!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
